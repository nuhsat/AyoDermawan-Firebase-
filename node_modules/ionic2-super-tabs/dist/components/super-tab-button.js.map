{"version":3,"sources":["../../src/components/super-tab-button.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAc,uBAAA,EAAyB,iBAAA,EAAmB,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG/H;IA2BE,wBACU,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAzBzB,aAAQ,GAAY,KAAK,CAAC;QAkB1B,WAAM,GAAiC,IAAI,YAAY,EAAkB,CAAC;IAQvE,CAAC;IANJ,gCAAO,GAAP;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAMD,yCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;IAChC,CAAC;IAqCH,qBAAC;AAAD,CAtEA,AAsEC;;AAnCM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE,mSAKT;gBACD,IAAI,EAAE;oBACJ,kBAAkB,EAAE,UAAU;oBAC9B,SAAS,EAAE,WAAW;oBACtB,oBAAoB,EAAE,kBAAkB;oBACxC,mBAAmB,EAAE,kBAAkB;oBACvC,wBAAwB,EAAE,mBAAmB;oBAC7C,UAAU,EAAE,EAAE;oBACd,MAAM,EAAE,QAAQ;iBACjB;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;aACtC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAF6F,CAE7F,CAAC;AACK,6BAAc,GAA2C;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAChC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC5B,CAAC","file":"super-tab-button.js","sourceRoot":"","sourcesContent":["import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, ElementRef } from '@angular/core';\r\n\r\n\r\nexport class SuperTabButton {\r\n\r\n  \r\n  selected: boolean = false;\r\n\r\n  \r\n  title: string;\r\n\r\n  \r\n  icon: string;\r\n\r\n  \r\n  badge: number;\r\n\r\n  \r\n  badgeColor: string;\r\n\r\n  \r\n  color: string;\r\n\r\n  \r\n  select: EventEmitter<SuperTabButton> = new EventEmitter<SuperTabButton>();\r\n\r\n  onClick() {\r\n    this.select.emit(this);\r\n  }\r\n\r\n  constructor(\r\n    private _el: ElementRef\r\n  ) {}\r\n\r\n  getNativeElement(): HTMLElement {\r\n    return this._el.nativeElement;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'super-tab-button',\r\n  template: `\r\n    <ion-icon *ngIf=\"!!icon\" [name]=\"icon\" [color]=\"color\"></ion-icon>\r\n    <span class=\"title\" *ngIf=\"!!title\" ion-text [color]=\"color\">{{ title }}</span>\r\n    <ion-badge mode=\"md\" [color]=\"badgeColor\">{{ badge }}</ion-badge>\r\n    <div class=\"button-effect\"></div>\r\n  `,\r\n  host: {\r\n    '[class.selected]': 'selected',\r\n    '(click)': 'onClick()',\r\n    '[class.title-only]': '!!title && !icon',\r\n    '[class.icon-only]': '!title && !!icon',\r\n    '[class.title-and-icon]': '!!title && !!icon',\r\n    'tappable': '',\r\n    'role': 'button'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'title': [{ type: Input },],\n'icon': [{ type: Input },],\n'badge': [{ type: Input },],\n'badgeColor': [{ type: Input },],\n'color': [{ type: Input },],\n'select': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}